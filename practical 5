# Importing NumPy Library
import numpy as np
import sys

print("-----GAUSS JORDAN METHOD-----")

# Reading number of unknowns
n:int = 3
print('\nNumber of unknowns: ',n)

# Making numpy array of n x (n+1) size 
a = np.zeros((n,n+1))
a = np.array([[1.0, 1.0, 1.0, 9.0], [2.0, -3.0, 4.0, 13.0], [3.0, 4.0, 5.0, 40.0]])

print("\nAugmented Matrix Coefficients : ")
print(a)

# Making numpy array of n size and initializing 
# to zero for storing solution vector
x = np.zeros(n)

# Applying Gauss Jordan Elimination
for i in range(n):
    if a[i][i] == 0.0:
        sys.exit('\nDivide by zero detected!')
        
    for j in range(n):
        if i != j:
            ratio = a[j][i]/a[i][i]

            for k in range(n+1):
                a[j][k] = a[j][k] - ratio * a[i][k]

# Obtaining Solution

for i in range(n):
    x[i] = a[i][n]/a[i][i]

# Displaying solution
print('\nRequired solution by Gauss Jordan is: ')
for i in range(n):
    print('X%d = %0.2f' %(i,x[i]), end = '\t')
print()
